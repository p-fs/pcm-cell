function PerformanceSEGGUI(aSeqPaths, aQueue)
% GUI for evaluation of the SEG and relaxed SEG measures.
%
% The user can select a tracking version and whether or not the relaxed
% version of the SEG measure should be used. Both SEG measures are computed
% as the mean Jaccard similarity index of ground truth regions and
% corresponding segmented regions. The relaxed version of the measure picks
% the segmented regions which give the highest Jaccard similarity indices,
% while the normal measure selects the region which has the largest overlap
% with the ground truth region provided that more than half the ground
% truth region is covered. The normal SEG measure was used in the cell
% tracking challenges. The results are printed in a table. The computations
% can either be started right away or be placed in a processing queue.
%
% Inputs:
% aSeqPaths - Cell array of strings with the paths of all the tracked image
%             sequences.
% aQueue - Queue object that lets the user put the computations in a
%          processing queue, so that they can be started later.
%
% See also:
% PerformanceSEG, SEGmeasure, PerformanceCTC14GUI

% GUI figure.
mainFigure = figure('Name', 'Evaluate SEG segmentation performance',...
    'NumberTitle', 'off',...
    'MenuBar', 'none',...
    'ToolBar', 'none',...
    'Units', 'pixels',...
    'Position', [200 200 500, 120],...
    'Resize', 'off');

% Find the tracking versions for which the performance can be evaluated.
versions = GetVersions(aSeqPaths);
versions = unique([versions{:}]);

% Data used to generate ui-controls in a SettingsPanel.
info.Tracking = Setting(...
    'name', 'Tracking version',...
    'type', 'choice',...
    'default', versions{1},...
    'alternatives_basic', versions,...
    'tooltip', ['Automatically generated tracking version to evaluate '...
    'the performance for.']);
coreAlts = arrayfun(@num2str, 1:MaxWorkers(), 'UniformOutput', false);
info.Relaxed = Setting(...
    'name', 'Relaxed SEG measure',...
    'type', 'check',...
    'default', true,...
    'tooltip', ['Removes constraint that more than half of each ground '...
    'truth region must be covered.']);
info.Number_of_cores = Setting(...
    'name', 'Number of cores',...
    'type', 'choice',...
    'default', '1',...
    'alternatives_basic', coreAlts,...
    'tooltip', 'The number of processor cores used for parallel processing.');

% Create a panel with all ui-objects.
sPanel = SettingsPanel(info,...
    'Parent', mainFigure,...
    'Position', [0 0.45 1 0.55]);

% Button to start computation.
uicontrol(...
    'BackgroundColor', get(mainFigure, 'color'),...
    'Style', 'pushbutton',...
    'Units', 'normalized',...
    'Position', [0 0 0.5 0.45],...
    'String', 'Start',...
    'Tooltip', 'Start computing the SEG measure.',...
    'Callback', @StartButton_Callback);

% Button to put the computation in the execution queue.
uicontrol(...
    'BackgroundColor', get(mainFigure, 'color'),...
    'Style', 'pushbutton',...
    'Units', 'normalized',...
    'Position', [0.5 0 0.5 0.45],...
    'String', 'Queue',...
    'Tooltip', ['Put the computation of the SEG measure in a '...
    'processing queue.'],...
    'Callback', @QueueButton_Callback);

    function TestPerformance(aVersion, aRelaxed, aNumCores)
        % Evaluates the segmentation performance.
        %
        % The function then displays the results in tables.
        %
        % Inputs:
        % aVersion - Tracking version to evaluate the performance of.
        % aRelaxed - Set this to true if the relaxed version of the SEG
        %            measure should be computed.
        % aNumCores - The number of processor cores to use.
        
        SEGmeasures = PerformanceSEG(aSeqPaths, aVersion, aRelaxed,...
            'NumCores', aNumCores);
        
        [~, seqDirs] = FileParts2(aSeqPaths);
        
        % Print the SEG values for the different sequences.
        if aRelaxed
            fprintf('\nRelaxed SEG measures:\n')
        else
            fprintf('\nSEG measures:\n')
        end
        for i = 1:length(seqDirs)
            fprintf('%-20s %-.4f\n', seqDirs{i}, SEGmeasures(i))
        end
    end

    function StartButton_Callback(~, ~)
        % Starts the computation of the SEG measures.
        
        version = sPanel.GetValue('Tracking');
        numCores = str2double(sPanel.GetValue('Number_of_cores'));
        relaxed = sPanel.GetValue('Relaxed');
        
        TestPerformance(version, relaxed, numCores)
    end

    function QueueButton_Callback(~, ~)
        % Puts the computation of SEG measures in a queue.
        
        version = sPanel.GetValue('Tracking');
        numCores = str2double(sPanel.GetValue('Number_of_cores'));
        relaxed = sPanel.GetValue('Relaxed');
        
        aQueue.Add(@()TestPerformance(version, relaxed, numCores));
    end
end