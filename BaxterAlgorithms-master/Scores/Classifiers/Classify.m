function oProbs = Classify(aCl, aFeatures)
% Classifies feature vectors into different classes.
%
% The function can currently only use a classifier based on multinomial
% logistic regression (MNR). The MNR classifiers have the type field set to
% 'mnrpca', 'mnr_pca', or 'mnrpci', and are trained using the function
% Train.
%
% The MNR classifier will first replace NaN-values by the mean feature
% values from the training data. Then it transforms the features into the
% space of the principal components of the training data. Finally, the
% logistic regression is performed.
%
% Inputs:
% aCl - Struct with information about the classifier. The structs can be
%       generated by loading the mat-files that were saved by the training
%       function.
% aFeatures - Feature matrix where each row corresponds to an observation
%             that we want to determine the class of, and each row
%             corresponds to a feature.
%
% Outputs:
% oProbs - Matrix with posterior probabilities of the different classes.
%          Each row corresponds to an observation and each column
%          corresponds to a class.
%
% See also:
% Train, FeatureMatrix, mnrval

switch lower(aCl.type)
    % Some old classifiers have the typo 'mnrpci'.
    case {'mnrpci', 'mnrpca', 'mnr_pca'}
        % Classifier based on multinomial logistic regression.
        
        % Replace NaN-values by mean feature values.
        if isfield(aCl, 'means')
            features = ReplaceNanFeatures(aFeatures, aCl.means);
        elseif isfield(aCl, 'dataset_means')
            % Some old classifiers use the field name 'dataset_means'.
            features = ReplaceNanFeatures(aFeatures, aCl.dataset_means);
        else
            error('The classifier does not have any mean values defined.')
        end
        
        % Transform the features into the space of the principal components
        % of the training data. This is is done to ensure that the training
        % converges.
        features = features * aCl.transform;
        
        % Compute probabilities.
        oProbs = mnrval(aCl.classifier, features);
        
        % In very rare cases, I have seen NaN-values in the output from
        % mnrval. This replaces the NaN-values so that the rows sum to 1.
        oProbs = ReplaceNanProbs(oProbs);
    case 'bag'
        [~, oProbs] = predict(aCl.classifier, aFeatures);
    case 'svm'
        features = ReplaceNanFeatures(aFeatures, aCl.means);
        if isa(aCl.classifier, 'ClassificationSVM')
            % 2-class SVM.
            [~, oProbs] = predict(aCl.classifier, features);
        else
            % Multiclass SVM.
            [~, ~, ~, oProbs] = predict(aCl.classifier, features);
        end
    otherwise
        error('Unknown classifier type ''%s'' specified.', aCl.type)
end
end