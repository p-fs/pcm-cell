function SavePlotsGUI(varargin)
% GUI which exports plots to graphics files.
%
% The function acts as a graphical user interface for SavePlots. The
% function can be run both from the Baxter Algorithms and as a standalone
% application. Most of the settings for SavePlots are specified using
% uicontrols, but some settings can only be given as additional input
% arguments directly to SavePlotsGUI.
%
% Property/Value inputs:
%
% Plots - A cell array of figures and/or plotting functions. If this input
%         is not specified, the function will assume that all of the open
%         figures are plots. Plotting functions should take a figure object
%         as input.
%
% Property/Value inputs that act as default values for uicontrols:
%
% Directory - Path of a folder where all the exported figures are saved.
% Title - Title used in tex- and pdf-documents.
% AuthorStr - Author string for the front page of tex- and pdf-documents.
%             Latex formatting can be used.
% Dpi - Resolution of raster formats, in dots per inch (see SaveFigure).
% SaveAxes - If this is set to true, one image is saved for each axes. Only
%            the plotting regions of the axes are saved. This option makes
%            it possible to save images that are shown in axes, without
%            introducing white margins. The default value is false.
% Width - Desired image width in inches (see SaveFigure).
% Height - Desired image height in inches (see SaveFigure).
% Formats - Cell array with file formats to export to. The allowed values
%           are 'pdf', 'eps', 'tif', 'fig', 'pdfdoc', and 'tex'.
% Style - Plotting style that will be applied to the plots.
% PaperSize - Paper size for tex- and pdf-documents (letter is default).
% FigNames - Cell array of file names, not including file extensions.
%
% Property/Value inputs passed directly to SavePlots:
%
% Orientation - Orientation used in tex- and pdf-documents. The allowed
%               values are 'portrait' and 'landscape'.
% FigUnits - Unit used for FigPosition. This only changes the unit of the
%            figure temporarily.
% FigPosition - Specifies a size and a location for all plot figures in the
%               format [left bottom width height].
% Xlim - Two element array with x-limits for all plot axes.
% Ylim - Two element array with y-limits for all plot axes.
% Captions - Cell array with captions for tex- and pdf-documents.
%
% See also:
% SavePlots, SaveFigure, WriteTex

basePath = fileparts(fileparts(mfilename('fullpath')));

% The function can be run both from the Baxter Algorithms and as a
% standalone application. Therefore folders are added to the MATLAB path.
if ~isdeployed
    % Adding paths in the deployed application results in an error.
    subdirs = textscan(genpath(basePath),...
        '%s','delimiter',pathsep);
    addpath(subdirs{1}{:});
end

% Split property value pairs into arguments for SavePlots and SavePlotsGUI.
spProps = {...
    'Orientation',...
    'FigUnits',...
    'FigPosition',...
    'Xlim',...
    'Ylim',...
    'Captions'};
[spArgs, spgArgs] = SelectArgs(varargin, spProps);

% Names and default values of properties that can be edited in the GUI.
pnames_dflts = {...
    'Plots', []
    'Directory', basePath
    'Title', 'Plots'
    'AuthorStr', ''
    'Dpi', 300
    'SaveAxes', false
    'Width', []
    'Height', 7.5
    'Formats', 'pdfdoc'
    'Style', 'None'
    'PaperSize', 'letter'
    'FigNames', []};

% Parse property/value inputs.
[   plots,...
    directory,...
    title,...
    authorStr,...
    dpi,...
    saveAxes,...
    width,...
    height,...
    formats,...
    style,...
    paperSize,...
    figNames] = GetArgs(pnames_dflts(:,1), pnames_dflts(:,2), true, spgArgs);

mainFigure = figure(...
    'WindowStyle', 'modal',...
    'MenuBar', 'none',...
    'NumberTitle', 'off',...
    'Name', 'Save Plots',...
    'Units', 'normalized',...
    'Position', [0.3 0.3 0.25 0.6]);

% Save button.
SaveButton = uicontrol('Style', 'pushbutton',...
    'String', 'Save',...
    'Units', 'normalized',...
    'Position', [0 0 1 0.1],...
    'Callback', @SaveButton_Callback,...
    'Tooltip', 'Save plots. The dialog remains open.');

% File formats that plots can be exported to.
allFormats = {'pdfdoc'; 'tex'; 'pdf'; 'eps'; 'tif'; 'fig'};
% Plotting styles that can be applied to the plots.
allStyles = {@NoStyle, @ScreenStyle, @PrintStyle, @PublicationStyle};
% Names that are displayed for the plotting styles.
styleNames = {'None' 'Screen' 'Print' 'Publication'};
% Allowed paper sizes in tex- and pdf-documents.
allPaperSizes = {'letter', 'A4'};
plotsAreFigures = isempty(plots);

if plotsAreFigures
    % No plots were given as input arguments. All existing figures are
    % treated as plots. The figures are returned in a seemingly random
    % order and are therefore sorted on the figure numbers.
    figures = get(0, 'Children');
    figures(figures == mainFigure) = [];  % Remove this SavePlotsGUI.
    [~, order] = sort([figures.Number]);
    figures = figures(order);
    plots = num2cell(figures);
end

% Get names for the plots. For function handle plots, a text string
% representation of the function handle is used. For figures, the figure
% name is used. If the figure has no name, the default name is 'figure'
% followed by a zero padded index with 4 digits.
if isempty(figNames)
    figNames = cell(size(plots));
    for i = 1:length(figNames)
        if isa(plots{i}, 'function_handle')
            figNames{i} = func2str(plots{i});
        else
            figNames{i} = get(plots{i}, 'Name');
            % Make sure that the figure names are valid file names, by
            % replacing characters that may cause problems by '_'.
            figNames{i} = regexprep(figNames{i}, '[^\w- (),]', '_');
            if isempty(figNames{i})
                figNames{i} = sprintf('figure%03d', i);
            end
        end
    end
end

% Append numbers to the ends of figure names if necessary to make them
% unique.
figNames = MakeUnique(figNames);

% Input data for SettingsPanel, used to create uicontrols.
info.directory = Setting(...
    'name', 'Directory',...
    'type', 'path',...
    'default', directory,...
    'tooltip', 'Path where plots will be saved.');
info.plots = Setting(...
    'name', 'Plots',...
    'type', 'list',...
    'default', figNames,...
    'alternatives_basic', figNames,...
    'callbackfunction', @EnableOrDisableSaveButton,...
    'tooltip', 'Which plots to save.');
info.formats = Setting(...
    'name', 'Formats',...
    'type', 'list',...
    'default', formats,...
    'alternatives_basic', allFormats,...
    'callbackfunction', @EnableOrDisableSaveButton,...
    'tooltip', 'Which formats to save the plots in.');
info.style = Setting(...
    'name', 'Style',...
    'type', 'choice',...
    'default', style,...
    'alternatives_basic', styleNames,...
    'tooltip', 'Changes font sizes and other parameters.');
info.height = Setting(...
    'name', 'Height',...
    'type', 'numeric',...
    'default', height,...
    'visiblefunction', @(x) any(~strcmp(x.Get('formats'), {'fig'})),...
    'checkfunction', @(x) str2double(x) > 0,...
    'callbackfunction', @ClearWidth,...
    'tooltip', 'Image file heights in inches.');
info.width = Setting(...
    'name', 'Width',...
    'type', 'numeric',...
    'default', width,...
    'visiblefunction', @(x) any(~strcmp(x.Get('formats'), {'fig'})),...
    'checkfunction', @(x) str2double(x) > 0,...
    'callbackfunction', @ClearHeight,...
    'tooltip', 'Image file widths in inches.');
info.dpi = Setting(...
    'name', 'Dpi',...
    'type', 'numeric',...
    'default', dpi,...
    'visiblefunction', @(x) any(strcmp(x.Get('formats'), {'tif'})),...
    'checkfunction', @(x) str2double(x) > 0,...
    'tooltip', 'Resolution in dots per inch.');
info.saveAxes = Setting(...
    'name', 'Save Axes',...
    'type', 'check',...
    'default', saveAxes,...
    'visiblefunction', @(x) any(strcmp(x.Get('formats'), {'tif'})),...
    'tooltip', 'Saves one tif-image per axes, without white borders.');
info.filename = Setting(...
    'name', 'Document Filename',...
    'type', 'char',...
    'default', title,...
    'visiblefunction', @(x) ~isempty(intersect(x.Get('formats'), {'pdfdoc' 'tex'})),...
    'tooltip', 'Filename for pfd and tex documents.');
info.title = Setting(...
    'name', 'Document Title',...
    'type', 'char',...
    'default', title,...
    'visiblefunction', @(x) ~isempty(intersect(x.Get('formats'), {'pdfdoc' 'tex'})),...
    'tooltip', 'Latex string for title of pdf and tex documents.');
info.authorStr = Setting(...
    'name', 'Author String',...
    'type', 'char',...
    'default', authorStr,...
    'visiblefunction', @(x) ~isempty(intersect(x.Get('formats'), {'pdfdoc' 'tex'})),...
    'tooltip', 'Latex string for author list.');
info.paperSize = Setting(...
    'name', 'Paper Size',...
    'type', 'choice',...
    'default', paperSize,...
    'alternatives_basic', allPaperSizes,...
    'visiblefunction', @(x) ~isempty(intersect(x.Get('formats'), {'pdfdoc' 'tex'})),...
    'tooltip', 'Paper size of pdf document containing all plots.');

% Create the settings panel with all the uicontrols for export settings.
sPanel = SettingsPanel(info,...
    'Parent', mainFigure,...
    'Position', [0 0.1 1 0.9],...
    'Split', 0.25,...
    'MinList', 6);

    function SaveButton_Callback(~, ~)
        % Executed when the user presses the save button.
        
        % Property/Value arguments for SavePlots.
        selected = sPanel.GetIndex('plots');
        
        % Handle figures that have been closed since the SavePlotsGUI was created.
        if plotsAreFigures
            open = ishandle([plots{selected}]);
            if ~all(open)
                warndlg([{'The following figures have been closed and can therefore not be saved:'}
                    figNames(selected(~open))], 'Figures cannot be saved')
                selected = selected(open);
            end
        end
        
        varargs = {...
            'Title', sPanel.GetValue('title'),...
            'AuthorStr', sPanel.GetValue('authorStr'),...
            'Formats', allFormats(sPanel.GetIndex('formats')),...
            'Style', allStyles{sPanel.GetIndex('style')},...
            'Height', sPanel.GetValue('height'),...
            'Width', sPanel.GetValue('width'),...
            'Dpi', sPanel.GetValue('dpi'),...
            'SaveAxes', sPanel.GetValue('saveAxes'),...
            'PaperSize', lower(allPaperSizes{sPanel.GetIndex('paperSize')}),...
            'FigNames', figNames(selected)};
        if ~isempty(spArgs)
            varargs = [varargs, spArgs];
        end
        
        % Call SavePlots with all arguments.
        SavePlots(...
            sPanel.GetValue('directory'),...
            sPanel.GetValue('filename'),...
            plots(selected), varargs{:})
    end

    function ClearHeight(~, ~)
        % Clears the height when the user inputs a valid width.
        
        sPanel.SetValue('height', '')
    end

    function ClearWidth(~, ~)
        % Clears the width when the user inputs a valid height.
        
        sPanel.SetValue('width', '')
    end

    function EnableOrDisableSaveButton(~, ~)
        % Enables the save button if both formats and plots are selected.
        %
        % If the user has not selected a format or a plot, the save button
        % is disabled so that errors do not occur in the save callback.
        
        if isempty(sPanel.GetIndex('plots')) || isempty(sPanel.GetIndex('formats'))
            set(SaveButton, 'Enable', 'off')
        else
            set(SaveButton, 'Enable', 'on')
        end 
    end
end