function CentralNucleiGUI(aSeqPaths)
% User interface to analyze fibers with centrally located nuclei.
%
% The function lets the user select analysis settings and a number of image
% folders to analyze and  and then passes the settings and the image
% folders to CentralNuclei, which finds fibers with centrally located
% nuclei. The function prints results for the individual image sequences
% and a total result for all of the selected image sequences. The function
% also creates the variables num_fibers and num_fibers_with_central_nuclei
% in the main workspace, so that the results can be analyzed further. If
% the Plot results checkbox is checked, all of the images will be shown in
% separate figures. On top of the images, the function plots the outlines
% of centrally located nuclei in white, other nuclei in gray, fibers with
% centrally located nuclei in red, and other fibers green. To run the
% function, you first need to create two segmentations with fibers and
% nuclei respectively. The segmentations are then selected in two dropdown
% menus in this GUI.
%
% Inputs:
% aSeqPaths - Cell array with image folders to be analyzed.
%
% See also:
% CentralNuclei, FusionIndexGUI

% Get the labels of all existing segmentation versions.
vers = GetVersions(aSeqPaths);
vers = unique([vers{:}]);
if length(vers) < 2
    errordlg(['You need to segment the nuclei and the fibers before '...
        'you can user this GUI.'],...
        '2 segmentations are required')
    return
end

% GUI figure.
mainFigure = figure(...
    'Name', 'Analysis of centrally located nuclei in fibers',...
    'NumberTitle', 'off',...
    'MenuBar', 'none',...
    'ToolBar', 'none',...
    'Units', 'normalized',...
    'Position', [0.25 0.4 0.3 0.35]);

seqDirs = FileEnd(aSeqPaths);

% Input data for SettingsPanel, used to create ui-controls.
info.Image_sequences = Setting(...
    'name', 'Image sequences',...
    'type', 'list',...
    'default', seqDirs,...
    'alternatives_basic', seqDirs,...
    'tooltip', 'Images to include in analysis.');
info.Fiber_version = Setting(...
    'name', 'Fiber version',...
    'type', 'choice',...
    'default', vers{1},...
    'alternatives_basic', vers,...
    'tooltip', 'Segmentation result with fibers.');
info.Nuclei_version = Setting(...
    'name', 'Nuclei version',...
    'type', 'choice',...
    'default', vers{2},...
    'alternatives_basic', vers,...
    'tooltip', 'Segmentation result with nuclei.');
info.Minimum_distance = Setting(...
    'name', 'Minimum distance',...
    'type', 'numeric',...
    'default', 1,...
    'checkfunction', @(x) str2double(x) > 1,...
    'tooltip', 'Minimum distance to a pixel outside the fiber.');
info.Remove_fibers_on_border = Setting(...
    'name', 'Remove fibers on border',...
    'type', 'check',...
    'default', true,...
    'tooltip', 'Exclude fibers that touch the image border.');
info.Plot = Setting(...
    'name', 'Plot results',...
    'type', 'check',...
    'default', false,...
    'tooltip', ['Plots fibers with central nuclei in red, other fibers '...
    'in green, central nuclei in white, and other nuclei in gray.']);

% Create a panel with all ui-objects.
sPanel = SettingsPanel(info,...
    'Parent', mainFigure,...
    'Position', [0 0.20 1 0.80],...
    'Split', 0.3,...
    'MinList', 10);

% Button to start computation.
uicontrol(...
    'BackgroundColor', get(mainFigure, 'color'),...
    'Style', 'pushbutton',...
    'Units', 'normalized',...
    'Position', [0 0 1 0.2],...
    'String', 'Start',...
    'Callback', @StartButton_Callback,...
    'Tooltip', 'Start the analysis.');

    function StartButton_Callback(~, ~)
        % Finds fibers with central nuclei in selected sequences.
        %
        % The function is executed every time the start button is pressed.
        % The function calls CentralNuclei for all of the selected image
        % sequences with the settings selected in the GUI. Results are
        % printed and exported to the main workspace.
        
        % Extract selections from the GUI.
        sequenceIndices = sPanel.GetIndex('Image_sequences');
        sequences = aSeqPaths(sequenceIndices);
        fiberVersion = sPanel.GetValue('Fiber_version');
        nucleiVersion = sPanel.GetValue('Nuclei_version');
        minDistance = sPanel.GetValue('Minimum_distance');
        doPlot = sPanel.GetValue('Plot');
        removeBorderFibers = sPanel.GetValue('Remove_fibers_on_border');
        
        numReg = nan(length(sequences),1);  % Number of regenerating fibers.
        numOther = nan(length(sequences),1);  % Number of other fibers.
        
        % Temporarily suppress warning about not displaying full
        % resolution.
        oldWarnings = warning('off', 'images:initSize:adjustingMag');
        
        for i = 1:length(sequenceIndices)
            [reg, other] =...
                CentralNuclei(sequences{i}, nucleiVersion, fiberVersion,...
                'MinDistance', minDistance,...
                'Plot', doPlot,...
                'RemoveBorderFibers', removeBorderFibers);
            
            numReg(i) = length(reg);
            numOther(i) = length(other);
            
            fprintf('%s: %d / %d = %.3f %% fibers with central nuclei\n',...
                FileEnd(sequences{i}),...
                numReg(i),...
                numReg(i)+numOther(i),...
                100*numReg(i)/(numReg(i)+numOther(i)))
        end
        
        % Restore warnings.
        warning(oldWarnings)
        
        % Print total results for all images.
        fprintf('Total: %d / %d = %.3f %% fibers with central nuclei\n',...
            sum(numReg),...
            sum(numReg)+sum(numOther),...
            100*sum(numReg)/(sum(numReg)+sum(numOther)));
        
        % Place results in main workspace.
        assignin('base', 'num_fibers', numReg+numOther)
        assignin('base', 'num_fibers_with_central_nuclei', numReg)
    end
end