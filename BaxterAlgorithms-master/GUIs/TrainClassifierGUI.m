function TrainClassifierGUI(aSeqPaths, aQueue)
% Opens a GUI for training of new classifiers.
%
% The function can use manually corrected tracking results to train
% logistic regression classifiers for cell counts in detections, mitosis
% and cell death. The user can choose what tracking version to train the
% classifiers on, the name under which the classifier will be saved, what
% features to use in the classification, and the maximum number of samples
% to train on. If a count classifier is trained, the user can also specify
% what the highest cell count class should be, and whether or not equal
% priors should be used for all classes.
%
% Inputs:
% aSeqPaths - Paths of sequences to train the classifiers on.
% aQueue - Queue object where the user can put the training functions for
%          later execution.
%
% See also:
% TrainClassifiers, Train, Classify

mainFigure = figure('Name', 'Train classifiers',...
    'NumberTitle', 'off',...
    'MenuBar', 'none',...
    'ToolBar', 'none',...
    'Units', 'pixels',...
    'Position', [200 200 400, 500],...
    'Resize', 'off');

% Find the tracking versions that can be used for training.
versions = GetVersions(aSeqPaths);
versions = unique([versions{:}]);

featureSetNames = {
    'TMI 2015 with microwell'
    'TMI 2015 without microwell'
    'ISBI 2012 with microwell'
    'ISBI 2012 without microwell'
    'All features with microwell'
    'All features without microwell'};

allFeatures = unique([TransmissionFeatures(); ISBI2012Features()]);
featureSets = {
    sort(TransmissionFeatures())
    sort(setdiff(TransmissionFeatures(), 'CenterDistance'))
    sort(ISBI2012Features())
    sort(setdiff(ISBI2012Features(), 'CenterDistance'))
    sort(allFeatures)
    sort(setdiff(allFeatures, 'CenterDistance'))};

featureList = TransmissionFeatures();

% Input data for SettingsPanel, used to create ui-objects.
info.Tracking_version = Setting(...
    'name', 'Tracking version',...
    'type', 'choice',...
    'default', versions{1},...
    'alternatives_basic', versions,...
    'tooltip', 'Tracking version to train on');
info.Classifier_name = Setting(...
    'name', 'Classifier name',...
    'type', 'char',...
    'default', '',...
    'tooltip', 'The trained classifiers will be saved with this name');
info.Cell_count = Setting(...
    'name', 'Cell count',...
    'type', 'check',...
    'default', true,...
    'tooltip', 'Check this to train a cell count classifier');
info.Mitosis = Setting(...
    'name', 'Mitosis',...
    'type', 'check',...
    'default', true,...
    'tooltip', 'Check this to train a mitosis classifier');
info.Death = Setting(...
    'name', 'Death',...
    'type', 'check',...
    'default', true,...
    'tooltip', 'Check this to train a cell death classifier');
info.Max_samples = Setting(...
    'name', 'Max samples',...
    'type', 'numeric',...
    'default', 1E4,...
    'checkfunction', @(x) str2double(x) > 0 && str2double(x) == round(str2double(x)),...
    'tooltip', 'The maximum number of samples to train on in each class');
info.Max_cells = Setting(...
    'name', 'Max cells',...
    'type', 'numeric',...
    'default', 2,...
    'visiblefunction', @(x) x.Get('Cell_count'),...
    'checkfunction', @(x) str2double(x) > 0 && str2double(x) < 10 && str2double(x) == round(str2double(x)),...
    'tooltip', 'The number of cells in the highest cell count class');
info.Equal_priors = Setting(...
    'name', 'Equal count priors',...
    'type', 'check',...
    'default', false,...
    'visiblefunction', @(x) x.Get('Cell_count'),...
    'tooltip', ['Use equal priors for the cell count classes. Useful '...
    'if the proportions vary a lot between image sequences.']);
info.FeatureSet = Setting(...
    'name', 'Feature set',...
    'type', 'choice',...
    'default', featureSetNames{1},...
    'alternatives_basic', featureSetNames,...
    'callbackfunction', @FeatureSet_Callback,...
    'tooltip', 'Feature sets to select features from');
info.Features = Setting(...
    'name', 'Features',...
    'type', 'list',...
    'default', featureList,...
    'alternatives_basic', featureList,...
    'tooltip', ['The classifier will be trained on the features '...
    'selected in this list']);

% Create a panel with all ui-objects.
sPanel = SettingsPanel(info,...
    'Parent', mainFigure,...
    'Position', [0 0.15 1 0.85]);

% Button to start training.
uicontrol(...
    'BackgroundColor', get(mainFigure, 'color'),...
    'Style', 'pushbutton',...
    'Units', 'normalized',...
    'Position', [0 0 0.5 0.15],...
    'String', 'Start',...
    'Tooltip', 'Start training the classifiers',...
    'Callback', @StartButton_Callback);

% Button to put the training function in the execution queue.
uicontrol(...
    'BackgroundColor', get(mainFigure, 'color'),...
    'Style', 'pushbutton',...
    'Units', 'normalized',...
    'Position', [0.5 0 0.5 0.15],...
    'String', 'Queue',...
    'Tooltip', 'Put the training of the classifiers in a processing queue',...
    'Callback', @QueueButton_Callback);

    function RunTrainClassifiers()
        % Calls TrainClassifiers with inputs taken from the GUI.
        
        % Get inputs from GUI.
        tracking = sPanel.GetValue('Tracking_version'); % Tracking version to train on.
        clName = sPanel.GetValue('Classifier_name');    % Name to save classifiers under.
        doCount = sPanel.GetValue('Cell_count');        % True if a cell count classifier should be trained.
        doMitosis = sPanel.GetValue('Mitosis');         % True if a mitosis classifier should be trained.
        doDeath = sPanel.GetValue('Death');             % True if a death classifier should be trained.
        maxSamples = sPanel.GetValue('Max_samples');    % Maximum number of samples to train on in each class.
        maxCells = sPanel.GetValue('Max_cells');        % The highest cell count class.
        equalPriors = sPanel.GetValue('Equal_priors');  % True if equal priors should be used in the count classifier.
        
        % Create a cell array with the features to use for training.
        featureIndex = sPanel.GetIndex('Features');
        features = featureList(featureIndex);
        
        % Train classifiers.
        TrainClassifiers(aSeqPaths,...
            tracking,...
            clName,...
            features,...
            doCount,...
            doMitosis,...
            doDeath,...
            'MaxSamples', maxSamples,...
            'MaxCount', maxCells,...
            'EqualCountPriors', equalPriors)
    end

    function ClassifierNameErrorDialog()
        % Opens an error dialog saying that the classifier name is invalid.
        
        errordlg(['The classifier name must only contain English '...
            'letters, numbers, and underscores. The name must '...
            'start with a letter.'], 'Invalid classifier name')
    end

    function FeatureSet_Callback(~, ~)
        % Callback which is executed when the user selects a feature set.
        %
        % The callback updates the list of available features.
        
        featureList = featureSets{sPanel.GetIndex('FeatureSet')};
        sPanel.SetAlternatives('Features', 'basic', featureList)
        sPanel.SetValue('Features', featureList)
    end

    function StartButton_Callback(~, ~)
        % Trains the classifiers.
        %
        % The function first checks if the entered classifier name is
        % valid. An error dialog is opened if it is not valid.
        
        clName = sPanel.GetValue('Classifier_name');  % Name to save classifiers under.
        if ~isvarname(clName)
            ClassifierNameErrorDialog()
            return
        end
        
        RunTrainClassifiers()
    end

    function QueueButton_Callback(~, ~)
        % Puts the training functions in an a processing queue.
        %
        % The function first checks if the entered classifier name is
        % valid. An error dialog is opened if it is not valid.
        
        clName = sPanel.GetValue('Classifier_name');  % Name to save classifiers under.
        if ~isvarname(clName)
            ClassifierNameErrorDialog()
            return
        end
        
        aQueue.Add(@RunTrainClassifiers);
    end
end