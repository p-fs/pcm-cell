function SegmentationOptimization(aSeqPaths, aQueue)
% User interface to optimize segmentations using coordinate ascent.
%
% This user interface serves as a front end for the classes SegOptimizerSeq
% and SegOptimizerEx, which can be used to optimized parameters for
% segmentation of cells. The scoring metric is either the SEG measure or
% the mean of the SEG measure and the TRA measure. The SEG and TRA measures
% were used in the ISBI 2015 Cell Tracking Challenge [1]. The optimization
% requires ground truth folders of the type used in the challenge, in the
% Analysis folders of the experiments. The optimization is performed for
% the current segmentation algorithm, with the current parameters as
% starting point. Each time the optimization algorithm finds a better set
% of parameters, the parameters are saved to the settings files of the
% image sequences. The algorithm parameters can be optimized for each image
% sequence separately, or for all image sequences jointly. Parameters can
% be optimized for the segmentation algorithms Segment_localvariance,
% Segment_bandpass, Segment_bandpass3D, Segment_threshold, and
% Segment_threshold3D. The user gets to select which parameters to optimize
% from a list. The processing can either be started right away or placed in
% an execution queue.
%
% Inputs:
% aSeqPaths - Cell array with the full paths of all image sequences that
%             will be available for optimization. A subset of image
%             sequences can be selected before the optimization is started.
% aQueue - Queue object that can be used to queue segmentation
%          optimizations and start them later.
%
% See also: SegOptimizerSeq, SegOptimizerEx, CoordinateDescent,
% SegmentationPlayer
%
% References:
% [1] Ulman, V.; Maška, M.; Magnusson, K. E. G.; Ronneberger, O.; Haubold,
%     C.; Harder, N.; Matula, P.; Matula, P.; Svoboda, D.; Radojevic, M.;
%     Smal, I.; Rohr, K.; Jaldén, J.; Blau, H. M.; Dzyubachyk, O.;
%     Lelieveldt, B.; Xiao, P.; Li, Y.; Cho, S.-Y.; Dufour, A. C.;
%     Olivo-Marin, J.-C.; Reyes-Aldasoro, C. C.; Solis-Lemus, J. A.;
%     Bensch, R.; Brox, T.; Stegmaier, J.; Mikut, R.; Wolf, S.; Hamprecht,
%     F. A.; Esteves, T.; Quelhas, P.; Demirel, Ö.; Malmström, L.; Jug, F.;
%     Tomancak, P.; Meijering, E.; Muñoz-Barrutia, A.; Kozubek, M. &
%     Ortiz-de-Solorzano, C., An objective comparison of cell-tracking
%     algorithms, Nature methods, 2017, 14, 1141–1152

InfoDialog('InfoSegmentationOptimization', 'Segmentation optimization',...
    ['This user interface optimizes segmentation parameters using '...
    'coordinate ascent. The scoring metric is either the SEG measure '...
    'or the mean of the SEG measure and the TRA measure. The SEG and '...
    'TRA measures were used to evaluate segmentation and tracking '...
    'performance in the ISBI 2015 Cell Tracking Challenge. Before the '...
    'optimization is started, you need to create and export a '...
    'segmentation ground truth using the option File->Export tracks to '...
    'CTC format->Export SEG ground truth. If you want to use the TRA '...
    'measure, you also need to create and export a TRA ground truth. '...
    'You also need to select an algorithm and starting parameters for '...
    'it in the GUI for specification of segmentation parameters. Each '...
    'time the optimization algorithm finds a better set of parameters, '...
    'the parameters are saved to the settings files of the image '...
    'sequences.'])

% The parameters that can be optimized for different algorithms.
local_variance_parameters = {...  % Segment_localvariance
    'LVSegRegionSize'
    'LVSegThreshold'
    'LVSegErodeSize'};
bandpass_parameters = {...  % Segment_bandpass and Segment_bandpass3D
    'BPSegHighStd'
    'BPSegLowStd'
    'BPSegBgFactor'
    'BPSegThreshold'
    'SegClipping'};
threshold_parameters = {...  % Segment_threshold and Segment_threshold3D
    'SegSmooth'
    'TSegThreshold'
    'SegClipping'};

% Go through the settings for all image sequences. An error is thrown if
% the image sequences are not all using the same segmentation algorithm. If
% any of the image sequences are using a watershed transform to break
% clusters, the parameter SegWHMax can be optimized in addition to the
% algorithm specific parameters. A watershed transform can be used in a
% subset of the image sequences, as the setting SegWHMax does not affect
% the performance if a watershed transform is not used.
optimize_watersheds = false;
for i = length(aSeqPaths):-1:1  % Go backwards to end with the first.
    imParams = ImageParameters(aSeqPaths{i});
    if i == length(aSeqPaths)
        segAlg = imParams.Get('SegAlgorithm');
    elseif ~strcmpi(imParams.Get('SegAlgorithm'), segAlg)
        errordlg(...
            'All image sequences have to use the same segmentation algorithm.',...
            'Unable to optimize segmentation')
        return
    end
    if ~strcmpi(imParams.Get('SegWatershed'), 'none')
        optimize_watersheds = true;
    end
end

% Select the parameters to be optimized based on which segmentation
% algorithm has been selected for the image sequences.
switch imParams.Get('SegAlgorithm')
    case 'Segment_localvariance'
        parameters = local_variance_parameters;
    case {'Segment_bandpass' 'Segment_bandpass3D'}
        parameters = bandpass_parameters;
    case {'Segment_threshold' 'Segment_threshold3D'}
        parameters = threshold_parameters;
    otherwise
        errordlg(...
            sprintf(['The segmentation can only be optimized for the '...
            'segmentation algorithms Segment_localvariance, '...
            'Segment_bandpass Segment_bandpass3D, Segment_threshold, '...
            'and Segment_threshold3D. The specified segmentation '...
            'algorithm is %s.'], imParams.Get('SegAlgorithm')),...
            'Unable to optimize segmentation')
        return
end
if optimize_watersheds
    % Add SegWHMax and SegWSmooth to the set of parameters that can be
    % optimized, if the parameters are not 0. The starting guess cannot be
    % 0 in the optimization.
    if imParams.Get('SegWHMax') ~= 0
        parameters = [parameters; 'SegWHMax'];
    end
    if imParams.Get('SegWSmooth') ~= 0
        parameters = [parameters; 'SegWSmooth'];
    end
end

% GUI figure.
mainFigure = figure('Name', 'Segmentation optimization',...
    'NumberTitle', 'off',...
    'MenuBar', 'none',...
    'ToolBar', 'none',...
    'Units', 'normalized',...
    'Position', [0.25 0.1 0.25 0.6]);

seqDirs = FileEnd(aSeqPaths);

% Input data for SettingsPanel, used to create ui-controls.
info.Image_sequences = Setting(...
    'name', 'Image sequences',...
    'type', 'list',...
    'default', seqDirs,...
    'alternatives_basic', seqDirs,...
    'tooltip', 'Images sequences to optimize the segmentation for');
info.Parameters = Setting(...
    'name', 'Parameters',...
    'type', 'list',...
    'default', parameters,...
    'alternatives_basic', parameters,...
    'tooltip', 'Algorithm parameters to optimize');
info.Scoring_function = Setting(...
    'name', 'Scoring function',...
    'type', 'choice',...
    'default', 'SEG',...
    'alternatives_basic', {'SEG'; '(SEG+TRA)/2'},...
    'tooltip', 'Scoring function to optimize');
info.Optimize_individually = Setting(...
    'name', 'Optimize individually',...
    'type', 'check',...
    'default', true,...
    'tooltip', 'Optimize the parameters for each image sequence separately');
info.Number_of_iterations = Setting(...
    'name', 'Number of iterations',...
    'type', 'numeric',...
    'default', 25,...
    'checkfunction', @(x) str2double(x) == round(str2double(x)) &&...
    str2double(x) > 0,...
    'tooltip', 'The number of times each parameter is optimized');
info.Maximum_number_of_images = Setting(...
    'name', 'Maximum number of images',...
    'type', 'numeric',...
    'default', nan,...
    'checkfunction', @(x) strcmpi(x, 'nan') ||...
    (str2double(x) == round(str2double(x)) && str2double(x) > 0),...
    'visiblefunction', @(x) strcmp(x.Get('Scoring_function'), 'SEG'),...
    'tooltip', 'The number of images to run the optimization on');
info.Images_with_most_cells = Setting(...
    'name', 'Images with most cells',...
    'type', 'check',...
    'default', true,...
    'visiblefunction', @(x) strcmp(x.Get('Scoring_function'), 'SEG') &&...
    ~isnan(x.Get('Maximum_number_of_images')),...
    'tooltip', 'Use the images with most cells for the optimization');
optimizationPath = fullfile(...
    fileparts(aSeqPaths{1}),...
    'Analysis',...
    'Optimizers',...
    datestr(now, 'yymmdd_HHMMss'));
info.Optimization_path = Setting(...
    'name', 'Optimization path',...
    'type', 'path',...
    'default', optimizationPath,...
    'tooltip', 'Folder where the optimizer and temporary results are saved.');

% Create a panel with all ui-objects.
sPanel = SettingsPanel(info,...
    'Parent', mainFigure,...
    'Position', [0 0.10 1 0.90],...
    'Split', 0.4,...
    'MinList', 10);

% Button to start the optimization.
uicontrol(...
    'Parent', mainFigure,...
    'Style', 'pushbutton',...
    'Units', 'normalized',...
    'Position', [0 0 0.5 0.1],...
    'String', 'Start',...
    'Tooltip', 'Start processing',...
    'Callback', @StartButton_Callback);

% Button to put the optimization in the execution queue.
uicontrol(...
    'Parent', mainFigure,...
    'Style', 'pushbutton',...
    'Units', 'normalized',...
    'Position', [0.5 0 0.5 0.1],...
    'String', 'Queue',...
    'Tooltip', 'Put the processing in a queue',...
    'Callback', @QueueButton_Callback);

    function StartButton_Callback(~, ~)
        % Callback which runs the optimization with the selected options.
        
        % Get options from the settings panel.
        image_sequences = aSeqPaths(sPanel.GetIndex('Image_sequences'));
        params = sPanel.GetValue('Parameters');
        scoring_function = sPanel.GetValue('Scoring_function');
        optimize_individually = sPanel.GetValue('Optimize_individually');
        number_of_iterations = sPanel.GetValue('Number_of_iterations');
        maximum_number_of_images = sPanel.GetValue('Maximum_number_of_images');
        images_with_most_cells = sPanel.GetValue('Images_with_most_cells');
        optimization_path = sPanel.GetValue('Optimization_path');
        
        % Start the optimization.
        RunOptimization(...
            image_sequences,...
            optimize_individually,...
            number_of_iterations,...
            scoring_function,...
            maximum_number_of_images,...
            images_with_most_cells,...
            params,...
            optimization_path)
    end

    function QueueButton_Callback(~, ~)
        % Callback which puts the optimization in a processing queue.
        %
        % The optimization will use the options that were selected when the
        % queue-button was pressed, even if the options are changed in the
        % user interface before the optimization is started. This makes it
        % possible to queue multiple optimizations for different sets of
        % image sequences.
        
        % Get options from the settings panel.
        image_sequences = aSeqPaths(sPanel.GetIndex('Image_sequences'));
        params = sPanel.GetValue('Parameters');
        scoring_function = sPanel.GetValue('Scoring_function');
        optimize_individually = sPanel.GetValue('Optimize_individually');
        number_of_iterations = sPanel.GetValue('Number_of_iterations');
        maximum_number_of_images = sPanel.GetValue('Maximum_number_of_images');
        images_with_most_cells = sPanel.GetValue('Images_with_most_cells');
        optimization_path = sPanel.GetValue('Optimization_path');
        
        % Put the optimization in the processing queue.
        aQueue.Add(@()RunOptimization(...
            image_sequences,...
            optimize_individually,...
            number_of_iterations,...
            scoring_function,...
            maximum_number_of_images,...
            images_with_most_cells,...
            params,...
            optimization_path))
    end
end

function RunOptimization(...
    aSeqPaths,...
    aOptimizeIndividually,...
    aMaxIter,...
    aScoringFunction,...
    aNumImages,...
    aMostCells,...
    aParameters,...
    aOptimizationPath)
% Optimizes the segmentation for a set of image sequences.
%
% Inputs:
% aSeqPaths - Cell array with full paths of the image sequences.
% aOptimizeIndividually - If this is true, the segmentation parameters will
%                         be optimized for each image sequence
%                         individually. Otherwise the parameters will be
%                         optimized for all image sequences jointly.
% aMaxIter - The number of times each parameter is optimized, if the
%            optimization has not converged before that.
% aScoringFunction - This parameter specifies the scoring function that
%                    should be optimized. The available options are 'SEG',
%                    and '(SEG+TRA)/2'. The SEG and TRA measures are the
%                    performance measures that were used to evaluate
%                    segmentation and tracking performance in the ISBI 2015
%                    Cell Tracking Challenge publication. All images in the
%                    sequences have to be segmented to compute TRA, but for
%                    the SEG measure it is enough to segment the images
%                    which have ground truth segmentations. For SEG it is
%                    also possible to use only a subset of the images with
%                    segmentation ground truths.
% aNumImages - The maximum number of time points in each image sequence
%              that will be included in the optimization. This input has an
%              effect only when the scoring function is 'SEG'.
% aMostCells - If this is set to true, the optimization will be performed
%              on the images with most cells, if the number of time points
%              with a segmentation ground truth is larger than aNumImages.
%              Otherwise, a random subset of time points will be used.
% aParameters - Cell array with the names of the segmentation parameters
%               that should be optimized.
% aOptimizationPath - Path of a folder where intermediate optimization
%                     results are saved so that the optimization can be
%                     resumed later. Once the optimization is finished, the
%                     optimizer object is also saved to this folder. The
%                     intermediate results are saved to a file named
%                     resume.mat and the optimizer is saved to a file named
%                     optimizer.mat. If the optimization is performed
%                     separately for each image sequence, two files are
%                     saved for each image sequence, and the above file
%                     names are followed by an underscore and the name of
%                     the image sequence.

% Define the grids of possible values for discrete parameters.
grids = cell(size(aParameters));
if any(strcmp(aParameters, 'LVSegErodeSize'))
    imParams = ImageParameters(aSeqPaths{1});
    switch imParams.Get('LVSegErodeShape')
        case 'square'
            grids{strcmp(aParameters, 'LVSegErodeSize')} = 1:100;
        case 'round'
            grids{strcmp(aParameters, 'LVSegErodeSize')} = ErosionGrid(100);
    end
end
if any(strcmp(aParameters, 'LVSegRegionSize'))
    imParams = ImageParameters(aSeqPaths{1});
    switch imParams.Get('LVSegRegionShape')
        case 'square'
            grids{strcmp(aParameters, 'LVSegRegionSize')} = 1:100;
        case 'round'
            grids{strcmp(aParameters, 'LVSegRegionSize')} = ErosionGrid(100);
    end
end

if aOptimizeIndividually
    % The segmentation parameters are optimized separately for each image
    % sequence.
    for i = 1:length(aSeqPaths)
        optimizer = SEGOptimizerSeq(aSeqPaths{i}, aParameters,...
            'Grids', grids,...
            'ScoringFunction', aScoringFunction,...
            'NumImages', aNumImages,...
            'MostCells', aMostCells,...
            'Plot', true);
        
        % Location where intermediate optimization results will be saved so
        % that the processing can be resumed.
        seqDir = FileEnd(aSeqPaths{i});
        resumePath = fullfile(aOptimizationPath, ['resume_', seqDir '.mat']);
        
        optimizer.Optimize_coordinatedescent(...
            'MaxIter', aMaxIter,...
            'ResumePath', resumePath);
        
        % Save the optimizer object when the optimization is finished.
        savePath = fullfile(aOptimizationPath, ['optimizer_' seqDir '.mat']);
        save(savePath, 'optimizer')
    end
else
    % The segmentation parameters are optimized jointly for all image
    % sequences.
    
    optimizer = SEGOptimizerEx(aSeqPaths, aParameters,...
        'Grids', grids,...
        'ScoringFunction', aScoringFunction,...
        'NumImages', aNumImages,...
        'MostCells', aMostCells,...
        'Plot', true);
    
    % Location where intermediate optimization results will be saved so
    % that the processing can be resumed.
    resumePath = fullfile(aOptimizationPath, 'resume_.mat');
    
    optimizer.Optimize_coordinatedescent(...
        'MaxIter', aMaxIter,...
        'ResumePath', resumePath);
    
    % Save the optimizer object when the optimization is finished.
    savePath = fullfile(aOptimizationPath, 'optimizer.mat');
    save(savePath, 'optimizer')
end
end