function PopulationAnalysisGUI(aSeqPaths)
% Creates a GUI where entire cell populations can be analyzed.
%
% In the GUI, the user can visualize time averages of different parameters
% taken over the entire experiment, for individual cells. Each cell is one
% data point, and the data points can be visualized using different
% plotting alternatives. The user gets to select a tracking version when
% the GUI is first opened and can later select a different version in a
% dropdown menu. The analysis parameters and the potting alternatives can
% be selected in list boxes. Plots can be exported to files. If multiple
% alternatives are selected in the list boxes, only the first alternatives
% are shown in the plots, but plots will be exported for all combinations
% of selected parameters and plotting alternatives.
%
% Parameters that can be analyzed:
% avgSpeed -        Cell speed along its trajectory (microns/hour).
% avgAxisRatio -    Ratio between major and minor axes.
% avgSize -         Area of the cell seen from above (square microns) for
%                   2D datasets and volume (cubic microns) for 3D datasets.
% divisionTime -    Life time of the cell between cell divisions (hours).
% deltaT -          Difference in division time between sisters (hours).
% timeToDeath -     Time from division to death (hours).
%
% Plotting alternatives:
% scatter - Scatter plot where dead cells and cells present in the last
%           frame can be colored red and blue respectively.
% histogram - Histogram plotted as a line.
% kernelSmoothingDensity - Kernel smoothing density.
% sorted - Plot of all values in descending order.
% cdf - Cumulative distribution function.
% symmetry - Dot plot showing the symmetry between daughter cells. The
%            daughter with the lowest value is plotted on the x-axis and
%            the other daughter is plotted on the y-axis.
% parentVsAllChildren - Dot plot showing the connections between cells
%                       present in the first frame and their progeny. The
%                       cells in the first frame are plotted on they x-axis
%                       and the progeny are plotted on the y-axis. The dots
%                       for the progeny of one cell are connected by a
%                       line.
% parentVsChildren - Dot plot showing the connections between mother cells
%                    and their daughters. The mother cell is plotted on
%                    the x-axis and the daughter cells are plotted on the
%                    y-axis. The daughter cells are connected by a line.
% overTime - Plots the parameter against the time points when the cells
%            appear. The appearance times are binned into intervals of 1
%            hour, and average parameter values for the time intervals are
%            computed and plotted against time.
%
% Inputs:
% aSeqPaths - Cell array with full paths of image sequence folders.
%
% See also:
% CellAnalysisPlayer, PlotConditionProperty, ScatterPlotGUI, SavePlotsGUI

% Open dialog to select tracking version.
versions = GetVersions(aSeqPaths);
versions = unique([versions{:}])';
[sel,ok] = listdlg('PromptString','Select tracking version:',...
    'SelectionMode','single',...
    'ListString',versions);
if ok
    ver = versions{sel};
else
    return
end

mainFigure = figure(...
    'NumberTitle', 'off',...
    'Units', 'normalized',...
    'Position', [0.15 0.05 0.8 0.8],...
    'Name', 'Population analysis');

% Load data.
cells = LoadCells(aSeqPaths, ver, 'AreCells', true, 'Compact', true);
conditions = sort(unique({cells.condition}));
numAxes = length(conditions);

is3D = cells(1).imageData.GetDim() == 3;
for i = 1:length(cells)
    if (cells(i).imageData.GetDim() == 3) ~= is3D;
        errordlg(...
            '2D and 3D datasets cannot be mixed in population analysis.',...
            'Analysis error')
        close(mainFigure)
        return
    end
end

% Cell parameters that can be plotted.
parameters = {...
    'avgSpeed',...
    'avgAxisRatio',...
    'avgSize',...
    'divisionTime',...
    'timeToFirstDivision',...
    'deltaT',...
    'timeToDeath'};

% Plotting alternatives that can be used to plot the parameters.
plots = {...
    'scatter',...
    'histogram',...
    'kernelSmoothingDensity',...
    'sorted',...
    'cdf',...
    'symmetry',...
    'parentVsAllChildren',...
    'parentVsChildren',...
    'overTime'};

% Add fluorescence properties.
fluorProps = {cells.regionProps};
fluorProps = cellfun(@fieldnames, fluorProps, 'UniformOutput', false);
fluorProps = unique(cat(1,fluorProps{:}))';
fluorProps = regexp(fluorProps, '^Fluor.*', 'match', 'once');
fluorProps(cellfun(@isempty, fluorProps)) = [];
parameters = [parameters fluorProps];

% Create a big axes for all conditions.
ax = axes('Position', [0.05 0.1 0.8 0.85]);
% Create a grid of sub-axes for the different conditions.
ax_multi = cell(1,numAxes);
axHeight = (1-0.1*numAxes-0.05)/numAxes;
for i = 1:numAxes
    ax_multi{numAxes-i+1} = axes(...
        'Position', [0.05 axHeight*(i-1)+0.1*i 0.8 axHeight],...
        'Visible', 'off');
end

% Panel with all control objects.
ControlPanel = uipanel(...
    'BackgroundColor', get(mainFigure, 'color'),...
    'Units', 'normalized',...
    'Position', [0.875, 0, 0.125, 1]);

% Order of control objects. Each cell contains the controls on one row.
order = [...
    {{'versionLabel'}}
    {{'versionPopupMenu'}}
    {{'parameterLabel'}}
    {{'parameterListBox'}}
    {{'plotLabel'}}
    {{'plotListBox'}}
    {{'generationCheckBox' 'generationLabel'}}
    {{'deadCheckBox' 'deadLabel'}}
    {{'survivedCheckBox' 'survivedLabel'}}
    {{'saveButton'}}];

% Relative positions in the format
% [left margin, top margin, width, height].
positions = struct(...
    'versionLabel',         [0.05, 0.01, 0.9,  0.02],...
    'versionPopupMenu',     [0.05, 0.01, 0.9,  0.02],...
    'parameterLabel',       [0.05, 0.01, 0.9,  0.02],...
    'saveButton',           [0.05, 0.01, 0.9,  0.05],...
    'parameterListBox',     [0.05, 0.01, 0.9,  0.4],...
    'plotLabel',            [0.05, 0.01, 0.9,  0.02],...
    'plotListBox',          [0.05, 0.01, 0.9,  0.3],...
    'generationCheckBox',   [0.05, 0.01, 0.12, 0.02],...
    'generationLabel',      [0.05, 0.01, 0.75, 0.02],...
    'deadCheckBox',         [0.05, 0.01, 0.12, 0.02],...
    'deadLabel',            [0.05, 0.01, 0.75, 0.02],...
    'survivedCheckBox',     [0.05, 0.01, 0.12, 0.02],...
    'survivedLabel',        [0.05, 0.01, 0.75, 0.02]);

% Convert the relative positions to absolute positions.
top = 1;
for i = 1:length(order)
    field1 = order{i}{1};
    pos1 = positions.(field1);
    deltaH = pos1(2) + pos1(4);
    left = 0;
    for j = 1:length(order{i})
        field2 = order{i}{j};
        pos2 = positions.(field2);
        p1.(field2) = left + pos2(1);
        p2.(field2) = top - deltaH;
        left = left + pos2(1) + pos2(3);
    end
    top = top - deltaH;
end

% Create all control objects.
versionLabel = uicontrol('Style', 'text',...
    'FontWeight', 'bold',...
    'Parent', ControlPanel,...
    'BackgroundColor', get(mainFigure, 'color'),...
    'HorizontalAlignment', 'left',...
    'String', 'Tracking Version',...
    'Units', 'normalized',...
    'Tooltip', 'Tracking version to be analyzed.'); %#ok<NASGU>
versionPopupMenu =  uicontrol(...
    'Parent', ControlPanel,...
    'BackgroundColor', 'white',...
    'HorizontalAlignment', 'left',...
    'Style', 'popupmenu',...
    'String', versions,...
    'Value', find(strcmpi(versions, ver)),...
    'Units', 'normalized',...
    'Callback', @VersionPopupMenu_Callback,...
    'Tooltip', 'Label of the tracking version to be analyzed.');
parameterLabel = uicontrol('Style', 'text',...
    'FontWeight', 'bold',...
    'Parent', ControlPanel,...
    'BackgroundColor', get(mainFigure, 'color'),...
    'HorizontalAlignment', 'left',...
    'String', 'Parameters',...
    'Units', 'normalized',...
    'Tooltip', 'Parameter to visualize. Select multiple for saving.'); %#ok<NASGU>
plotLabel = uicontrol('Style', 'text',...
    'FontWeight', 'bold',...
    'Parent', ControlPanel,...
    'BackgroundColor', get(mainFigure, 'color'),...
    'HorizontalAlignment', 'left',...
    'String', 'Plots',...
    'Units', 'normalized',...
    'Tooltip', 'Plotting method. Select multiple for saving.'); %#ok<NASGU>

generationCheckBox = uicontrol('Style', 'checkbox',...
    'Value', 0,...
    'Parent', ControlPanel,...
    'BackgroundColor', get(mainFigure, 'color'),...
    'Units', 'normalized',...
    'Callback', @(aObj, aEvent)Draw(),...
    'Tooltip', 'Plot every cell generation separately.');
generationLabel = uicontrol('Style', 'text',...
    'Parent', ControlPanel,...
    'BackgroundColor', get(mainFigure, 'color'),...
    'HorizontalAlignment', 'left',...
    'String', 'Separate Generations',...
    'Units', 'normalized',...
    'Tooltip', 'Plot every cell generation separately.'); %#ok<NASGU>
deadCheckBox = uicontrol('Style', 'checkbox',...
    'Value', 0,...
    'Parent', ControlPanel,...
    'BackgroundColor', get(mainFigure, 'color'),...
    'Units', 'normalized',...
    'Callback', @(aObj, aEvent)Draw(),...
    'Tooltip', 'Make dead cells red in scatter plot.');
deadLabel = uicontrol('Style', 'text',...
    'Parent', ControlPanel,...
    'BackgroundColor', get(mainFigure, 'color'),...
    'HorizontalAlignment', 'left',...
    'String', 'Mark Dead Cells',...
    'Units', 'normalized',...
    'Tooltip', 'Make dead cells red in scatter plot.');
survivedCheckBox = uicontrol('Style', 'checkbox',...
    'Value', 0,...
    'Parent', ControlPanel,...
    'BackgroundColor', get(mainFigure, 'color'),...
    'Units', 'normalized',...
    'Callback', @(aObj, aEvent)Draw(),...
    'Tooltip', 'Make cells in the last frame blue in scatter plot.');
survivedLabel = uicontrol('Style', 'text',...
    'Parent', ControlPanel,...
    'BackgroundColor', get(mainFigure, 'color'),...
    'HorizontalAlignment', 'left',...
    'String', 'Mark Survived Cells',...
    'Units', 'normalized',...
    'Tooltip', 'Make cells in the last frame blue in scatter plot.');

saveButton = uicontrol(...
    'Style', 'pushbutton',...
    'String', 'Save Plots',...
    'Parent', ControlPanel,...
    'Units', 'normalized',...
    'Callback', @SaveButton_Callback,...
    'Tooltip', 'Save all selected parameters and plots to pdf.'); %#ok<NASGU>
parameterListBox = uicontrol('Style', 'listbox',...
    'Min', 0,...
    'Max', 2,...
    'Parent', ControlPanel,...
    'String', parameters,...
    'Units', 'normalized',...
    'Callback', @(aObj, aEvent)Draw(),...
    'Tooltip', 'Parameter to visualize. Select multiple for saving.');
plotListBox = uicontrol('Style', 'listbox',...
    'Min', 0,...
    'Max', 2,...
    'Parent', ControlPanel,...
    'String', plots,...
    'Units', 'normalized',...
    'Callback', @PlotListBox_Callback,...
    'Tooltip', 'Plotting method. Select multiple for saving.');

% Position controls.
for i = 1:length(order)
    for j = 1:length(order{i})
        eval(['set(' order{i}{j} ,...
            ',''Position'', ['...
            num2str([p1.(order{i}{j}),...
            p2.(order{i}{j}),...
            positions.(order{i}{j})(3),...
            positions.(order{i}{j})(4)]) '])'])
    end
end

Draw()

    function Draw()
        % Plots the selected parameter with the selected plotting function.
        %
        % The function also prepares the axes where the plotting will be
        % done and hides all other axes.
        
        if get(generationCheckBox, 'Value')
            % Prepare main axes for plotting and hide sub-axes.
            cla(ax)
            legend(ax, 'off')
            set(ax, 'Visible', 'off')
            for ii = 1:length(ax_multi)
                set(ax_multi{ii}, 'Visible', 'on')
                cla(ax_multi{ii})
                legend(ax_multi{ii}, 'off')
            end
            plAx = ax_multi;
        else
            % Prepare sub-axes for plotting and hide main axes.
            cla(ax)
            legend(ax, 'off')
            set(ax, 'Visible', 'on')
            for ii = 1:length(ax_multi)
                set(ax_multi{ii}, 'Visible', 'off')
                cla(ax_multi{ii})
                legend(ax_multi{ii}, 'off')
            end
            plAx = {ax};
        end
        
        parIndex = get(parameterListBox, 'Value');
        plIndex = get(plotListBox, 'Value');
        
        if isempty(parIndex) || isempty(plIndex)
            return
        end
        
        % The first parameter and plotting alternative are used if multiple
        % list box entries have been selected.
        PlotConditionProperty(...
            plAx,...
            cells,...
            parameters{parIndex(1)},...
            is3D,...
            plots{plIndex(1)},...
            get(generationCheckBox, 'Value'),...
            get(deadCheckBox, 'Value'),...
            get(survivedCheckBox, 'Value'))
    end

    function PlotListBox_Callback(~, ~)
        % Called when the user changes the selection of plotting functions.
        %
        % The function enables the checkboxes for dead and surviving cells
        % if the scatter plot is selected, and disables them otherwise.
        % Then the function updates the plot by calling Draw.
        
        plotIndex = get(plotListBox, 'Value');
        if any(strcmp(plots(plotIndex), 'scatter'))
            set(deadLabel, 'Enable', 'on')
            set(deadCheckBox, 'Enable', 'on')
            set(survivedLabel, 'Enable', 'on')
            set(survivedCheckBox, 'Enable', 'on')
        else
            set(deadLabel, 'Enable', 'off')
            set(deadCheckBox, 'Enable', 'off')
            set(survivedLabel, 'Enable', 'off')
            set(survivedCheckBox, 'Enable', 'off')
        end
        Draw()
    end

    function SaveButton_Callback(~, ~)
        % Opens a GUI where plots can be exported to graphics files.
        %
        % The function creates function handles that can be used to create
        % the plots, and passes these function handles along with
        % corresponding captions to SavePlotsGUI. The user can select
        % multiple parameters and plotting methods in the list boxes. In
        % that case, a plot will be exported for each combination between
        % parameter and plotting method. From SavePlotsGUI, multiple
        % graphics formats can be created, including a pdf document
        % containing all plots and their captions.
        
        % Get parameters and plotting methods. Both can be vectors with
        % multiple alternatives.
        parIndex = get(parameterListBox, 'Value');
        plotIndex = get(plotListBox, 'Value');
        
        if get(generationCheckBox, 'Value')
            pdfTitle = 'Single cell parameters sorted by generation';
        else
            pdfTitle = 'Single cell parameters';
        end
        
        % The number of sub-panels (axes) in the plots to be exported.
        if get(generationCheckBox, 'Value')
            numPlots = numAxes;
        else
            numPlots = 1;
        end
        
        % Generate function handles and captions for the different plots.
        funcs = {};
        captions = {};
        for par = 1:length(parIndex)
            for pl = 1:length(plotIndex)
                axFunc = @(anAxes)PlotConditionProperty(...
                    anAxes,...
                    cells,...
                    parameters{parIndex(par)},...
                    plots{plotIndex(pl)},...
                    get(generationCheckBox, 'Value'),...
                    get(deadCheckBox, 'Value'),...
                    get(survivedCheckBox, 'Value'));
                
                funcs = [funcs
                    {@(aFig)MultiAxFig(aFig, axFunc, numPlots, 1)}]; %#ok<AGROW>
                captions = [captions
                    {[GetTitle(parameters{parIndex(par)}, is3D)...
                    ', ' plots{plotIndex(pl)} ' plot.']}]; %#ok<AGROW>
            end
        end
        
        % Take the author string from the first image sequence.
        imData = ImageData(aSeqPaths{1});
        
        % Open a GUI where the plots can be exported.
        SavePlotsGUI('Plots', funcs,...
            'Directory', fullfile(fileparts(aSeqPaths{1}), 'Analysis'),...
            'Title', pdfTitle,...
            'Captions', captions,...
            'AuthorStr', imData.Get('authorStr'),...
            'FigUnits', 'normalized',...
            'FigPosition', [0.15 0.05 0.8 0.8])
    end

    function VersionPopupMenu_Callback(~, ~)
        % Loads data and updates plots when a tracking version is selected.
        %
        % The callback also updates the list of parameters that can be
        % plotted, as that can change if fluorescence data is available in
        % one tracking version but not in another.
        
        ver = versions{get(versionPopupMenu, 'Value')};
        cells = LoadCells(aSeqPaths, ver,...
            'AreCells', true, 'Compact', true);
        
        % The parameter that was plotted before the version change.
        selectedParameter = parameters(get(parameterListBox, 'Value'));
        
        % Cell parameters that can be plotted.
        parameters = {...
            'avgSpeed',...
            'avgAxisRatio',...
            'avgSize',...
            'divisionTime',...
            'timeToFirstDivision',...
            'deltaT',...
            'timeToDeath'};
        
        % Add fluorescence properties.
        fluorProps = {cells.regionProps};
        fluorProps = cellfun(@fieldnames, fluorProps,...
            'UniformOutput', false);
        fluorProps = unique(cat(1,fluorProps{:}))';
        fluorProps = regexp(fluorProps, '^Fluor.*', 'match', 'once');
        fluorProps(cellfun(@isempty, fluorProps)) = [];
        parameters = [parameters fluorProps];
        
        % Try to select the same parameter in the listbox after loading
        % new data. If the old parameter is not available, or if no
        % parameter is was selected, the first function is selected for the
        % new data.
        if length(selectedParameter) >= 1
            newValue = find(strcmp(parameters, selectedParameter{1}),1);
            if isempty(newValue)
                newValue = 1;
            end
        else
            newValue = 1;
        end
        
        % Put the names of the plotting parameters for the new data into
        % the listbox.
        set(parameterListBox,...
            'String', parameters,...
            'Value', newValue)
        
        Draw()
    end
end